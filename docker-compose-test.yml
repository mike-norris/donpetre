services:
  postgresql:
    image: postgres:15-alpine
    container_name: donpetre-postgres
    environment:
      POSTGRES_DB: donpetre
      POSTGRES_USER: ${DB_USERNAME:-donpetre}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-donpetre_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./donpetre-gateway/init-scripts/01-init-schema.sql:/docker-entrypoint-initdb.d/01-init-schema.sql:ro
      - ./donpetre-knowledge-ingestion/init-scripts/02-ingestion-schema.sql:/docker-entrypoint-initdb.d/02-ingestion-schema.sql:ro
    networks:
      - donpetre-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-donpetre} -d donpetre"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: donpetre-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - donpetre-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  api-gateway:
    build:
      context: .
      dockerfile: donpetre-gateway/Dockerfile
    container_name: donpetre-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgresql
      DB_USERNAME: ${DB_USERNAME:-donpetre}
      DB_PASSWORD: ${DB_PASSWORD:-donpetre_pass}
      REDIS_HOST: redis
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_BACKUP_SECRET: ${JWT_BACKUP_SECRET}
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - donpetre-network

  knowledge-ingestion:
    build:
      context: .
      dockerfile: donpetre-knowledge-ingestion/Dockerfile
    container_name: donpetre-knowledge-ingestion
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgresql
      DB_PORT: 5432
      DB_NAME: donpetre
      DB_USERNAME: ${DB_USER:-donpetre}
      DB_PASSWORD: ${DB_PASSWORD:-donpetre_pass}
      REDIS_HOST: redis
      ENCRYPTION_SECRET_KEY: ${ENCRYPTION_SECRET_KEY}
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - donpetre-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  donpetre-network:
    driver: bridge